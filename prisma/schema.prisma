// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id Int @id @default(autoincrement())
  first_name String @db.VarChar(255)
  last_name String @db.VarChar(255)
  phone String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  role Role @default(USER)

  responds Announcment[] @relation(name: "AnnouncmentToRespondent")
  announcments Announcment[] @relation(name: "AnnouncmentToAuthor")
  @@map("user")
}

model Category {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255) @unique

  announcments Announcment[]
  @@map("category")
}

model Announcment {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  description String
  active Boolean @default(true)

  author User @relation(name: "AnnouncmentToAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  respondent User? @relation(name: "AnnouncmentToRespondent", fields: [respondentId], references: [id], onDelete: Cascade)
  respondentId Int?

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("announcment")
}